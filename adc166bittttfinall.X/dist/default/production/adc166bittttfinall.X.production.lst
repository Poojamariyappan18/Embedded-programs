

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Oct 04 09:15:38 2023

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	text9,local,class=CODE,merge=1,delta=2
    17                           	psect	text10,local,class=CODE,merge=1,delta=2
    18                           	psect	text11,local,class=CODE,merge=1,delta=2
    19                           	psect	text12,local,class=CODE,merge=1,delta=2
    20                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 1.41
    25                           ; Generated 25/01/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F877A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001D                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  0088                     	;# 
    98  0089                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  009F                     	;# 
   112  010C                     	;# 
   113  010D                     	;# 
   114  010E                     	;# 
   115  010F                     	;# 
   116  018C                     	;# 
   117  018D                     	;# 
   118  0014                     _SSPCON	set	20
   119  0008                     _PORTD	set	8
   120  0013                     _SSPBUF	set	19
   121  003A                     _RC2	set	58
   122  0039                     _RC1	set	57
   123  0038                     _RC0	set	56
   124  0063                     _SSPIF	set	99
   125  0093                     _SSPADD	set	147
   126  0088                     _TRISD	set	136
   127  043A                     _TRISC2	set	1082
   128  0439                     _TRISC1	set	1081
   129  0438                     _TRISC0	set	1080
   130  048B                     _RCEN	set	1163
   131  048E                     _ACKSTAT	set	1166
   132  048C                     _ACKEN	set	1164
   133  048D                     _ACKDT	set	1165
   134  0489                     _RSEN	set	1161
   135  048A                     _PEN	set	1162
   136  0488                     _SEN	set	1160
   137                           
   138                           ; #config settings
   139  0000                     
   140                           	psect	cinit
   141  07FC                     start_initialization:	
   142  07FC                     __initialization:	
   143  07FC                     end_of_initialization:	
   144                           ;End of C runtime variable initialization code
   145                           
   146  07FC                     __end_of__initialization:	
   147  07FC  0183               	clrf	3
   148  07FD  120A  118A  2E66   	ljmp	_main	;jump to C main() function
   149                           
   150                           	psect	cstackCOMMON
   151  0070                     __pcstackCOMMON:	
   152  0070                     ?_i2c_flag:	
   153  0070                     ??_i2c_flag:	
   154                           ; 1 bytes @ 0x0
   155                           
   156  0070                     ?_i2c_start:	
   157                           ; 1 bytes @ 0x0
   158                           
   159  0070                     ??_i2c_start:	
   160                           ; 1 bytes @ 0x0
   161                           
   162  0070                     ?_i2c_stop:	
   163                           ; 1 bytes @ 0x0
   164                           
   165  0070                     ??_i2c_stop:	
   166                           ; 1 bytes @ 0x0
   167                           
   168  0070                     ?_i2c_ack:	
   169                           ; 1 bytes @ 0x0
   170                           
   171  0070                     ??_i2c_ack:	
   172                           ; 1 bytes @ 0x0
   173                           
   174  0070                     ?_i2c_nack:	
   175                           ; 1 bytes @ 0x0
   176                           
   177  0070                     ??_i2c_nack:	
   178                           ; 1 bytes @ 0x0
   179                           
   180  0070                     ?_i2c_send:	
   181                           ; 1 bytes @ 0x0
   182                           
   183  0070                     ??_i2c_send:	
   184                           ; 1 bytes @ 0x0
   185                           
   186  0070                     ?_i2c_read:	
   187                           ; 1 bytes @ 0x0
   188                           
   189  0070                     ??_i2c_read:	
   190                           ; 1 bytes @ 0x0
   191                           
   192  0070                     ?_delay:	
   193                           ; 1 bytes @ 0x0
   194                           
   195  0070                     ??_delay:	
   196                           ; 1 bytes @ 0x0
   197                           
   198  0070                     ?_cmmd:	
   199                           ; 1 bytes @ 0x0
   200                           
   201  0070                     ?_main:	
   202                           ; 1 bytes @ 0x0
   203                           
   204  0070                     ?___lwdiv:	
   205                           ; 1 bytes @ 0x0
   206                           
   207  0070                     ?___lwmod:	
   208                           ; 2 bytes @ 0x0
   209                           
   210  0070                     i2c_send@b:	
   211                           ; 2 bytes @ 0x0
   212                           
   213  0070                     delay@i:	
   214                           ; 1 bytes @ 0x0
   215                           
   216  0070                     ___lwdiv@divisor:	
   217                           ; 2 bytes @ 0x0
   218                           
   219  0070                     ___lwmod@divisor:	
   220                           ; 2 bytes @ 0x0
   221                           
   222                           
   223                           ; 2 bytes @ 0x0
   224  0070                     	ds	2
   225  0072                     ?_cmd:	
   226  0072                     ?_dat:	
   227                           ; 1 bytes @ 0x2
   228                           
   229  0072                     cmd@x:	
   230                           ; 1 bytes @ 0x2
   231                           
   232  0072                     dat@y:	
   233                           ; 2 bytes @ 0x2
   234                           
   235  0072                     ___lwdiv@dividend:	
   236                           ; 2 bytes @ 0x2
   237                           
   238  0072                     ___lwmod@dividend:	
   239                           ; 2 bytes @ 0x2
   240                           
   241                           
   242                           ; 2 bytes @ 0x2
   243  0072                     	ds	2
   244  0074                     ??_cmd:	
   245  0074                     ??_dat:	
   246                           ; 1 bytes @ 0x4
   247                           
   248  0074                     ??_cmmd:	
   249                           ; 1 bytes @ 0x4
   250                           
   251  0074                     ??___lwdiv:	
   252                           ; 1 bytes @ 0x4
   253                           
   254  0074                     ??___lwmod:	
   255                           ; 1 bytes @ 0x4
   256                           
   257                           
   258                           ; 1 bytes @ 0x4
   259  0074                     	ds	1
   260  0075                     ___lwmod@counter:	
   261  0075                     ___lwdiv@quotient:	
   262                           ; 1 bytes @ 0x5
   263                           
   264                           
   265                           ; 2 bytes @ 0x5
   266  0075                     	ds	2
   267  0077                     ___lwdiv@counter:	
   268                           
   269                           ; 1 bytes @ 0x7
   270  0077                     	ds	1
   271  0078                     ?_fun:	
   272  0078                     fun@adc:	
   273                           ; 1 bytes @ 0x8
   274                           
   275                           
   276                           ; 2 bytes @ 0x8
   277  0078                     	ds	2
   278  007A                     ??_fun:	
   279  007A                     ??_main:	
   280                           ; 1 bytes @ 0xA
   281                           
   282                           
   283                           ; 1 bytes @ 0xA
   284  007A                     	ds	2
   285  007C                     main@result:	
   286                           
   287                           ; 2 bytes @ 0xC
   288  007C                     	ds	2
   289                           
   290                           	psect	cstackBANK0
   291  0020                     __pcstackBANK0:	
   292  0020                     fun@c:	
   293                           
   294                           ; 2 bytes @ 0x0
   295  0020                     	ds	2
   296  0022                     fun@e:	
   297                           
   298                           ; 2 bytes @ 0x2
   299  0022                     	ds	2
   300  0024                     fun@g:	
   301                           
   302                           ; 2 bytes @ 0x4
   303  0024                     	ds	2
   304  0026                     fun@h:	
   305                           
   306                           ; 2 bytes @ 0x6
   307  0026                     	ds	2
   308  0028                     fun@i:	
   309                           
   310                           ; 2 bytes @ 0x8
   311  0028                     	ds	2
   312  002A                     fun@j:	
   313                           
   314                           ; 2 bytes @ 0xA
   315  002A                     	ds	2
   316  002C                     fun@k:	
   317                           
   318                           ; 2 bytes @ 0xC
   319  002C                     	ds	2
   320  002E                     fun@m:	
   321                           
   322                           ; 2 bytes @ 0xE
   323  002E                     	ds	2
   324  0030                     fun@n:	
   325                           
   326                           ; 2 bytes @ 0x10
   327  0030                     	ds	2
   328  0032                     fun@l:	
   329                           
   330                           ; 2 bytes @ 0x12
   331  0032                     	ds	2
   332  0034                     fun@a:	
   333                           
   334                           ; 2 bytes @ 0x14
   335  0034                     	ds	2
   336  0036                     fun@b:	
   337                           
   338                           ; 2 bytes @ 0x16
   339  0036                     	ds	2
   340  0038                     fun@d:	
   341                           
   342                           ; 2 bytes @ 0x18
   343  0038                     	ds	2
   344  003A                     fun@f:	
   345                           
   346                           ; 2 bytes @ 0x1A
   347  003A                     	ds	2
   348                           
   349                           	psect	maintext
   350  0666                     __pmaintext:	
   351 ;;
   352 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   353 ;;
   354 ;; *************** function _main *****************
   355 ;; Defined at:
   356 ;;		line 100 in file "16bitfinaladc.c"
   357 ;; Parameters:    Size  Location     Type
   358 ;;		None
   359 ;; Auto vars:     Size  Location     Type
   360 ;;  result          2   12[COMMON] unsigned int 
   361 ;; Return value:  Size  Location     Type
   362 ;;                  1    wreg      void 
   363 ;; Registers used:
   364 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   365 ;; Tracked objects:
   366 ;;		On entry : B00/0
   367 ;;		On exit  : 0/0
   368 ;;		Unchanged: 0/0
   369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   370 ;;      Params:         0       0       0       0       0
   371 ;;      Locals:         2       0       0       0       0
   372 ;;      Temps:          2       0       0       0       0
   373 ;;      Totals:         4       0       0       0       0
   374 ;;Total ram usage:        4 bytes
   375 ;; Hardware stack levels required when called:    4
   376 ;; This function calls:
   377 ;;		_fun
   378 ;;		_i2c_ack
   379 ;;		_i2c_nack
   380 ;;		_i2c_read
   381 ;;		_i2c_send
   382 ;;		_i2c_start
   383 ;;		_i2c_stop
   384 ;; This function is called by:
   385 ;;		Startup code after reset
   386 ;; This function uses a non-reentrant model
   387 ;;
   388                           
   389                           
   390                           ;psect for function _main
   391  0666                     _main:	
   392                           
   393                           ;16bitfinaladc.c: 102: TRISC0=0;
   394                           
   395                           ;incstack = 0
   396                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   397  0666  1683               	bsf	3,5	;RP0=1, select bank1
   398  0667  1303               	bcf	3,6	;RP1=0, select bank1
   399  0668  1007               	bcf	7,0	;volatile
   400                           
   401                           ;16bitfinaladc.c: 103: TRISC1=0;
   402  0669  1087               	bcf	7,1	;volatile
   403                           
   404                           ;16bitfinaladc.c: 104: TRISC2=0;
   405  066A  1107               	bcf	7,2	;volatile
   406                           
   407                           ;16bitfinaladc.c: 105: TRISD=0x00;
   408  066B  0188               	clrf	8	;volatile
   409                           
   410                           ;16bitfinaladc.c: 106: unsigned int result;
   411                           ;16bitfinaladc.c: 108: SSPCON=0X28;
   412  066C  3028               	movlw	40
   413  066D  1283               	bcf	3,5	;RP0=0, select bank0
   414  066E  1303               	bcf	3,6	;RP1=0, select bank0
   415  066F  0094               	movwf	20	;volatile
   416                           
   417                           ;16bitfinaladc.c: 109: SSPADD=9;
   418  0670  3009               	movlw	9
   419  0671  1683               	bsf	3,5	;RP0=1, select bank1
   420  0672  1303               	bcf	3,6	;RP1=0, select bank1
   421  0673  0093               	movwf	19	;volatile
   422                           
   423                           ;16bitfinaladc.c: 110: i2c_start();
   424  0674  120A  118A  2565  120A  118A  	fcall	_i2c_start
   425                           
   426                           ;16bitfinaladc.c: 111: i2c_send(0x90);
   427  0679  3090               	movlw	144
   428  067A  120A  118A  25A9  120A  118A  	fcall	_i2c_send
   429                           
   430                           ;16bitfinaladc.c: 112: i2c_send(0x01);
   431  067F  3001               	movlw	1
   432  0680  120A  118A  25A9  120A  118A  	fcall	_i2c_send
   433                           
   434                           ;16bitfinaladc.c: 113: i2c_send(0xC2);
   435  0685  30C2               	movlw	194
   436  0686  120A  118A  25A9  120A  118A  	fcall	_i2c_send
   437                           
   438                           ;16bitfinaladc.c: 114: i2c_send(0x03);
   439  068B  3003               	movlw	3
   440  068C  120A  118A  25A9  120A  118A  	fcall	_i2c_send
   441                           
   442                           ;16bitfinaladc.c: 115: i2c_stop();
   443  0691  120A  118A  256C  120A  118A  	fcall	_i2c_stop
   444                           
   445                           ;16bitfinaladc.c: 116: _delay((unsigned long)((10)*(4000000/4000.0)));
   446  0696  300D               	movlw	13
   447  0697  00FB               	movwf	??_main+1
   448  0698  30FB               	movlw	251
   449  0699  00FA               	movwf	??_main
   450  069A                     u337:	
   451  069A  0BFA               	decfsz	??_main,f
   452  069B  2E9A               	goto	u337
   453  069C  0BFB               	decfsz	??_main+1,f
   454  069D  2E9A               	goto	u337
   455  069E  2E9F               	nop2
   456  069F                     l897:	
   457                           ;16bitfinaladc.c: 118: while(1){
   458                           
   459                           
   460                           ;16bitfinaladc.c: 119: result=0;
   461  069F  01FC               	clrf	main@result
   462  06A0  01FD               	clrf	main@result+1
   463                           
   464                           ;16bitfinaladc.c: 120: i2c_start();
   465  06A1  120A  118A  2565  120A  118A  	fcall	_i2c_start
   466                           
   467                           ;16bitfinaladc.c: 121: i2c_send(0x90);
   468  06A6  3090               	movlw	144
   469  06A7  120A  118A  25A9  120A  118A  	fcall	_i2c_send
   470                           
   471                           ;16bitfinaladc.c: 122: i2c_send(0x00);
   472  06AC  3000               	movlw	0
   473  06AD  120A  118A  25A9  120A  118A  	fcall	_i2c_send
   474                           
   475                           ;16bitfinaladc.c: 123: i2c_stop();
   476  06B2  120A  118A  256C  120A  118A  	fcall	_i2c_stop
   477                           
   478                           ;16bitfinaladc.c: 124: _delay((unsigned long)((10)*(4000000/4000.0)));
   479  06B7  300D               	movlw	13
   480  06B8  00FB               	movwf	??_main+1
   481  06B9  30FB               	movlw	251
   482  06BA  00FA               	movwf	??_main
   483  06BB                     u347:	
   484  06BB  0BFA               	decfsz	??_main,f
   485  06BC  2EBB               	goto	u347
   486  06BD  0BFB               	decfsz	??_main+1,f
   487  06BE  2EBB               	goto	u347
   488  06BF  2EC0               	nop2
   489                           
   490                           ;16bitfinaladc.c: 125: i2c_start();
   491  06C0  120A  118A  2565  120A  118A  	fcall	_i2c_start
   492                           
   493                           ;16bitfinaladc.c: 126: i2c_send(0x91);
   494  06C5  3091               	movlw	145
   495  06C6  120A  118A  25A9  120A  118A  	fcall	_i2c_send
   496                           
   497                           ;16bitfinaladc.c: 127: result|=i2c_read();
   498  06CB  120A  118A  2583  120A  118A  	fcall	_i2c_read
   499  06D0  00FA               	movwf	??_main
   500  06D1  01FB               	clrf	??_main+1
   501  06D2  087A               	movf	??_main,w
   502  06D3  04FC               	iorwf	main@result,f
   503  06D4  087B               	movf	??_main+1,w
   504  06D5  04FD               	iorwf	main@result+1,f
   505                           
   506                           ;16bitfinaladc.c: 128: i2c_ack();
   507  06D6  120A  118A  2573  120A  118A  	fcall	_i2c_ack
   508                           
   509                           ;16bitfinaladc.c: 129: result|=i2c_read()<<8;
   510  06DB  120A  118A  2583  120A  118A  	fcall	_i2c_read
   511  06E0  00FA               	movwf	??_main
   512  06E1  01FB               	clrf	??_main+1
   513  06E2  087A               	movf	??_main,w
   514  06E3  00FB               	movwf	??_main+1
   515  06E4  01FA               	clrf	??_main
   516  06E5  087A               	movf	??_main,w
   517  06E6  04FC               	iorwf	main@result,f
   518  06E7  087B               	movf	??_main+1,w
   519  06E8  04FD               	iorwf	main@result+1,f
   520                           
   521                           ;16bitfinaladc.c: 130: i2c_nack();
   522  06E9  120A  118A  257B  120A  118A  	fcall	_i2c_nack
   523                           
   524                           ;16bitfinaladc.c: 131: i2c_stop();
   525  06EE  120A  118A  256C  120A  118A  	fcall	_i2c_stop
   526                           
   527                           ;16bitfinaladc.c: 132: fun(result);
   528  06F3  087D               	movf	main@result+1,w
   529  06F4  00F9               	movwf	fun@adc+1
   530  06F5  087C               	movf	main@result,w
   531  06F6  00F8               	movwf	fun@adc
   532  06F7  120A  118A  26FD  120A  118A  	fcall	_fun
   533  06FC  2E9F               	goto	l897
   534  06FD                     __end_of_main:	
   535                           
   536                           	psect	text1
   537  056C                     __ptext1:	
   538 ;; *************** function _i2c_stop *****************
   539 ;; Defined at:
   540 ;;		line 20 in file "adc.h"
   541 ;; Parameters:    Size  Location     Type
   542 ;;		None
   543 ;; Auto vars:     Size  Location     Type
   544 ;;		None
   545 ;; Return value:  Size  Location     Type
   546 ;;                  1    wreg      void 
   547 ;; Registers used:
   548 ;;		status,2, status,0, pclath, cstack
   549 ;; Tracked objects:
   550 ;;		On entry : 0/0
   551 ;;		On exit  : 0/0
   552 ;;		Unchanged: 0/0
   553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   554 ;;      Params:         0       0       0       0       0
   555 ;;      Locals:         0       0       0       0       0
   556 ;;      Temps:          0       0       0       0       0
   557 ;;      Totals:         0       0       0       0       0
   558 ;;Total ram usage:        0 bytes
   559 ;; Hardware stack levels used:    1
   560 ;; Hardware stack levels required when called:    1
   561 ;; This function calls:
   562 ;;		_i2c_flag
   563 ;; This function is called by:
   564 ;;		_main
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568                           
   569                           ;psect for function _i2c_stop
   570  056C                     _i2c_stop:	
   571                           
   572                           ;adc.h: 22: PEN=1;
   573                           
   574                           ;incstack = 0
   575                           ; Regs used in _i2c_stop: [status,2+status,0+pclath+cstack]
   576  056C  1683               	bsf	3,5	;RP0=1, select bank1
   577  056D  1303               	bcf	3,6	;RP1=0, select bank1
   578  056E  1511               	bsf	17,2	;volatile
   579                           
   580                           ;adc.h: 23: i2c_flag();
   581  056F  120A  118A  255F   	fcall	_i2c_flag
   582  0572  0008               	return
   583  0573                     __end_of_i2c_stop:	
   584                           
   585                           	psect	text2
   586  0565                     __ptext2:	
   587 ;; *************** function _i2c_start *****************
   588 ;; Defined at:
   589 ;;		line 15 in file "adc.h"
   590 ;; Parameters:    Size  Location     Type
   591 ;;		None
   592 ;; Auto vars:     Size  Location     Type
   593 ;;		None
   594 ;; Return value:  Size  Location     Type
   595 ;;                  1    wreg      void 
   596 ;; Registers used:
   597 ;;		status,2, status,0, pclath, cstack
   598 ;; Tracked objects:
   599 ;;		On entry : 0/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   603 ;;      Params:         0       0       0       0       0
   604 ;;      Locals:         0       0       0       0       0
   605 ;;      Temps:          0       0       0       0       0
   606 ;;      Totals:         0       0       0       0       0
   607 ;;Total ram usage:        0 bytes
   608 ;; Hardware stack levels used:    1
   609 ;; Hardware stack levels required when called:    1
   610 ;; This function calls:
   611 ;;		_i2c_flag
   612 ;; This function is called by:
   613 ;;		_main
   614 ;; This function uses a non-reentrant model
   615 ;;
   616                           
   617                           
   618                           ;psect for function _i2c_start
   619  0565                     _i2c_start:	
   620                           
   621                           ;adc.h: 17: SEN=1;
   622                           
   623                           ;incstack = 0
   624                           ; Regs used in _i2c_start: [status,2+status,0+pclath+cstack]
   625  0565  1683               	bsf	3,5	;RP0=1, select bank1
   626  0566  1303               	bcf	3,6	;RP1=0, select bank1
   627  0567  1411               	bsf	17,0	;volatile
   628                           
   629                           ;adc.h: 18: i2c_flag();
   630  0568  120A  118A  255F   	fcall	_i2c_flag
   631  056B  0008               	return
   632  056C                     __end_of_i2c_start:	
   633                           
   634                           	psect	text3
   635  05A9                     __ptext3:	
   636 ;; *************** function _i2c_send *****************
   637 ;; Defined at:
   638 ;;		line 42 in file "adc.h"
   639 ;; Parameters:    Size  Location     Type
   640 ;;  b               1    wreg     unsigned char 
   641 ;; Auto vars:     Size  Location     Type
   642 ;;  b               1    0[COMMON] unsigned char 
   643 ;; Return value:  Size  Location     Type
   644 ;;                  1    wreg      void 
   645 ;; Registers used:
   646 ;;		wreg, status,2, status,0, pclath, cstack
   647 ;; Tracked objects:
   648 ;;		On entry : 0/0
   649 ;;		On exit  : 0/0
   650 ;;		Unchanged: 0/0
   651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   652 ;;      Params:         0       0       0       0       0
   653 ;;      Locals:         1       0       0       0       0
   654 ;;      Temps:          0       0       0       0       0
   655 ;;      Totals:         1       0       0       0       0
   656 ;;Total ram usage:        1 bytes
   657 ;; Hardware stack levels used:    1
   658 ;; Hardware stack levels required when called:    1
   659 ;; This function calls:
   660 ;;		_i2c_flag
   661 ;; This function is called by:
   662 ;;		_main
   663 ;; This function uses a non-reentrant model
   664 ;;
   665                           
   666                           
   667                           ;psect for function _i2c_send
   668  05A9                     _i2c_send:	
   669                           
   670                           ;incstack = 0
   671                           ; Regs used in _i2c_send: [wreg+status,2+status,0+pclath+cstack]
   672                           ;i2c_send@b stored from wreg
   673  05A9  00F0               	movwf	i2c_send@b
   674                           
   675                           ;adc.h: 44: SSPBUF=b;
   676  05AA  0870               	movf	i2c_send@b,w
   677  05AB  1283               	bcf	3,5	;RP0=0, select bank0
   678  05AC  1303               	bcf	3,6	;RP1=0, select bank0
   679  05AD  0093               	movwf	19	;volatile
   680                           
   681                           ;adc.h: 45: i2c_flag();
   682  05AE  120A  118A  255F  120A  118A  	fcall	_i2c_flag
   683  05B3                     l64:	
   684                           ;adc.h: 46: while(ACKSTAT==1);
   685                           
   686  05B3  1683               	bsf	3,5	;RP0=1, select bank1
   687  05B4  1303               	bcf	3,6	;RP1=0, select bank1
   688  05B5  1F11               	btfss	17,6	;volatile
   689  05B6  0008               	return
   690  05B7  2DB3               	goto	l64
   691  05B8                     __end_of_i2c_send:	
   692                           
   693                           	psect	text4
   694  0583                     __ptext4:	
   695 ;; *************** function _i2c_read *****************
   696 ;; Defined at:
   697 ;;		line 50 in file "adc.h"
   698 ;; Parameters:    Size  Location     Type
   699 ;;		None
   700 ;; Auto vars:     Size  Location     Type
   701 ;;		None
   702 ;; Return value:  Size  Location     Type
   703 ;;                  1    wreg      unsigned char 
   704 ;; Registers used:
   705 ;;		wreg, status,2, status,0, pclath, cstack
   706 ;; Tracked objects:
   707 ;;		On entry : 0/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   711 ;;      Params:         0       0       0       0       0
   712 ;;      Locals:         0       0       0       0       0
   713 ;;      Temps:          0       0       0       0       0
   714 ;;      Totals:         0       0       0       0       0
   715 ;;Total ram usage:        0 bytes
   716 ;; Hardware stack levels used:    1
   717 ;; Hardware stack levels required when called:    1
   718 ;; This function calls:
   719 ;;		_i2c_flag
   720 ;; This function is called by:
   721 ;;		_main
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           
   726                           ;psect for function _i2c_read
   727  0583                     _i2c_read:	
   728                           
   729                           ;adc.h: 52: RCEN=1;
   730                           
   731                           ;incstack = 0
   732                           ; Regs used in _i2c_read: [wreg+status,2+status,0+pclath+cstack]
   733  0583  1683               	bsf	3,5	;RP0=1, select bank1
   734  0584  1303               	bcf	3,6	;RP1=0, select bank1
   735  0585  1591               	bsf	17,3	;volatile
   736                           
   737                           ;adc.h: 53: i2c_flag();
   738  0586  120A  118A  255F   	fcall	_i2c_flag
   739                           
   740                           ;adc.h: 54: return SSPBUF;
   741  0589  1283               	bcf	3,5	;RP0=0, select bank0
   742  058A  1303               	bcf	3,6	;RP1=0, select bank0
   743  058B  0813               	movf	19,w	;volatile
   744  058C  0008               	return
   745  058D                     __end_of_i2c_read:	
   746                           
   747                           	psect	text5
   748  057B                     __ptext5:	
   749 ;; *************** function _i2c_nack *****************
   750 ;; Defined at:
   751 ;;		line 36 in file "adc.h"
   752 ;; Parameters:    Size  Location     Type
   753 ;;		None
   754 ;; Auto vars:     Size  Location     Type
   755 ;;		None
   756 ;; Return value:  Size  Location     Type
   757 ;;                  1    wreg      void 
   758 ;; Registers used:
   759 ;;		status,2, status,0, pclath, cstack
   760 ;; Tracked objects:
   761 ;;		On entry : 0/0
   762 ;;		On exit  : 0/0
   763 ;;		Unchanged: 0/0
   764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   765 ;;      Params:         0       0       0       0       0
   766 ;;      Locals:         0       0       0       0       0
   767 ;;      Temps:          0       0       0       0       0
   768 ;;      Totals:         0       0       0       0       0
   769 ;;Total ram usage:        0 bytes
   770 ;; Hardware stack levels used:    1
   771 ;; Hardware stack levels required when called:    1
   772 ;; This function calls:
   773 ;;		_i2c_flag
   774 ;; This function is called by:
   775 ;;		_main
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           
   780                           ;psect for function _i2c_nack
   781  057B                     _i2c_nack:	
   782                           
   783                           ;adc.h: 38: ACKDT=1;
   784                           
   785                           ;incstack = 0
   786                           ; Regs used in _i2c_nack: [status,2+status,0+pclath+cstack]
   787  057B  1683               	bsf	3,5	;RP0=1, select bank1
   788  057C  1303               	bcf	3,6	;RP1=0, select bank1
   789  057D  1691               	bsf	17,5	;volatile
   790                           
   791                           ;adc.h: 39: ACKEN=1;
   792  057E  1611               	bsf	17,4	;volatile
   793                           
   794                           ;adc.h: 40: i2c_flag();
   795  057F  120A  118A  255F   	fcall	_i2c_flag
   796  0582  0008               	return
   797  0583                     __end_of_i2c_nack:	
   798                           
   799                           	psect	text6
   800  0573                     __ptext6:	
   801 ;; *************** function _i2c_ack *****************
   802 ;; Defined at:
   803 ;;		line 30 in file "adc.h"
   804 ;; Parameters:    Size  Location     Type
   805 ;;		None
   806 ;; Auto vars:     Size  Location     Type
   807 ;;		None
   808 ;; Return value:  Size  Location     Type
   809 ;;                  1    wreg      void 
   810 ;; Registers used:
   811 ;;		status,2, status,0, pclath, cstack
   812 ;; Tracked objects:
   813 ;;		On entry : 0/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   817 ;;      Params:         0       0       0       0       0
   818 ;;      Locals:         0       0       0       0       0
   819 ;;      Temps:          0       0       0       0       0
   820 ;;      Totals:         0       0       0       0       0
   821 ;;Total ram usage:        0 bytes
   822 ;; Hardware stack levels used:    1
   823 ;; Hardware stack levels required when called:    1
   824 ;; This function calls:
   825 ;;		_i2c_flag
   826 ;; This function is called by:
   827 ;;		_main
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           
   832                           ;psect for function _i2c_ack
   833  0573                     _i2c_ack:	
   834                           
   835                           ;adc.h: 32: ACKDT=0;
   836                           
   837                           ;incstack = 0
   838                           ; Regs used in _i2c_ack: [status,2+status,0+pclath+cstack]
   839  0573  1683               	bsf	3,5	;RP0=1, select bank1
   840  0574  1303               	bcf	3,6	;RP1=0, select bank1
   841  0575  1291               	bcf	17,5	;volatile
   842                           
   843                           ;adc.h: 33: ACKEN=1;
   844  0576  1611               	bsf	17,4	;volatile
   845                           
   846                           ;adc.h: 34: i2c_flag();
   847  0577  120A  118A  255F   	fcall	_i2c_flag
   848  057A  0008               	return
   849  057B                     __end_of_i2c_ack:	
   850                           
   851                           	psect	text7
   852  055F                     __ptext7:	
   853 ;; *************** function _i2c_flag *****************
   854 ;; Defined at:
   855 ;;		line 10 in file "adc.h"
   856 ;; Parameters:    Size  Location     Type
   857 ;;		None
   858 ;; Auto vars:     Size  Location     Type
   859 ;;		None
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		None
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   869 ;;      Params:         0       0       0       0       0
   870 ;;      Locals:         0       0       0       0       0
   871 ;;      Temps:          0       0       0       0       0
   872 ;;      Totals:         0       0       0       0       0
   873 ;;Total ram usage:        0 bytes
   874 ;; Hardware stack levels used:    1
   875 ;; This function calls:
   876 ;;		Nothing
   877 ;; This function is called by:
   878 ;;		_i2c_start
   879 ;;		_i2c_stop
   880 ;;		_i2c_ack
   881 ;;		_i2c_nack
   882 ;;		_i2c_send
   883 ;;		_i2c_read
   884 ;;		_i2c_restart
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           
   889                           ;psect for function _i2c_flag
   890  055F                     _i2c_flag:	
   891  055F                     l43:	
   892                           ;adc.h: 12: while(SSPIF==0);
   893                           
   894                           ;incstack = 0
   895                           ; Regs used in _i2c_flag: []
   896                           
   897  055F  1283               	bcf	3,5	;RP0=0, select bank0
   898  0560  1303               	bcf	3,6	;RP1=0, select bank0
   899  0561  1D8C               	btfss	12,3	;volatile
   900  0562  2D5F               	goto	l43
   901                           
   902                           ;adc.h: 13: SSPIF=0;
   903  0563  118C               	bcf	12,3	;volatile
   904  0564  0008               	return
   905  0565                     __end_of_i2c_flag:	
   906                           
   907                           	psect	text8
   908  06FD                     __ptext8:	
   909 ;; *************** function _fun *****************
   910 ;; Defined at:
   911 ;;		line 64 in file "16bitfinaladc.c"
   912 ;; Parameters:    Size  Location     Type
   913 ;;  adc             2    8[COMMON] unsigned int 
   914 ;; Auto vars:     Size  Location     Type
   915 ;;  f               2   26[BANK0 ] unsigned int 
   916 ;;  d               2   24[BANK0 ] unsigned int 
   917 ;;  b               2   22[BANK0 ] unsigned int 
   918 ;;  a               2   20[BANK0 ] unsigned int 
   919 ;;  l               2   18[BANK0 ] unsigned int 
   920 ;;  n               2   16[BANK0 ] unsigned int 
   921 ;;  m               2   14[BANK0 ] unsigned int 
   922 ;;  k               2   12[BANK0 ] unsigned int 
   923 ;;  j               2   10[BANK0 ] unsigned int 
   924 ;;  i               2    8[BANK0 ] unsigned int 
   925 ;;  h               2    6[BANK0 ] unsigned int 
   926 ;;  g               2    4[BANK0 ] unsigned int 
   927 ;;  e               2    2[BANK0 ] unsigned int 
   928 ;;  c               2    0[BANK0 ] unsigned int 
   929 ;; Return value:  Size  Location     Type
   930 ;;                  1    wreg      void 
   931 ;; Registers used:
   932 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   938 ;;      Params:         2       0       0       0       0
   939 ;;      Locals:         0      28       0       0       0
   940 ;;      Temps:          0       0       0       0       0
   941 ;;      Totals:         2      28       0       0       0
   942 ;;Total ram usage:       30 bytes
   943 ;; Hardware stack levels used:    1
   944 ;; Hardware stack levels required when called:    3
   945 ;; This function calls:
   946 ;;		___lwdiv
   947 ;;		___lwmod
   948 ;;		_cmmd
   949 ;;		_dat
   950 ;; This function is called by:
   951 ;;		_main
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           
   956                           ;psect for function _fun
   957  06FD                     _fun:	
   958                           
   959                           ;16bitfinaladc.c: 67: cmmd();
   960                           
   961                           ;incstack = 0
   962                           ; Regs used in _fun: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   963  06FD  120A  118A  25CC  120A  118A  	fcall	_cmmd
   964                           
   965                           ;16bitfinaladc.c: 68: unsigned int a,b,c,d,e,f,g,h,i,j,k,m,n,l;
   966                           ;16bitfinaladc.c: 71: a= adc;
   967  0702  0879               	movf	fun@adc+1,w
   968  0703  1283               	bcf	3,5	;RP0=0, select bank0
   969  0704  1303               	bcf	3,6	;RP1=0, select bank0
   970  0705  00B5               	movwf	fun@a+1
   971  0706  0878               	movf	fun@adc,w
   972  0707  00B4               	movwf	fun@a
   973                           
   974                           ;16bitfinaladc.c: 73: b=a/10;
   975  0708  300A               	movlw	10
   976  0709  00F0               	movwf	___lwdiv@divisor
   977  070A  3000               	movlw	0
   978  070B  00F1               	movwf	___lwdiv@divisor+1
   979  070C  0835               	movf	fun@a+1,w
   980  070D  00F3               	movwf	___lwdiv@dividend+1
   981  070E  0834               	movf	fun@a,w
   982  070F  00F2               	movwf	___lwdiv@dividend
   983  0710  120A  118A  262A  120A  118A  	fcall	___lwdiv
   984  0715  0871               	movf	?___lwdiv+1,w
   985  0716  1283               	bcf	3,5	;RP0=0, select bank0
   986  0717  1303               	bcf	3,6	;RP1=0, select bank0
   987  0718  00B7               	movwf	fun@b+1
   988  0719  0870               	movf	?___lwdiv,w
   989  071A  00B6               	movwf	fun@b
   990                           
   991                           ;16bitfinaladc.c: 74: c=a%10;
   992  071B  300A               	movlw	10
   993  071C  00F0               	movwf	___lwmod@divisor
   994  071D  3000               	movlw	0
   995  071E  00F1               	movwf	___lwmod@divisor+1
   996  071F  0835               	movf	fun@a+1,w
   997  0720  00F3               	movwf	___lwmod@dividend+1
   998  0721  0834               	movf	fun@a,w
   999  0722  00F2               	movwf	___lwmod@dividend
  1000  0723  120A  118A  25F8  120A  118A  	fcall	___lwmod
  1001  0728  0871               	movf	?___lwmod+1,w
  1002  0729  1283               	bcf	3,5	;RP0=0, select bank0
  1003  072A  1303               	bcf	3,6	;RP1=0, select bank0
  1004  072B  00A1               	movwf	fun@c+1
  1005  072C  0870               	movf	?___lwmod,w
  1006  072D  00A0               	movwf	fun@c
  1007                           
  1008                           ;16bitfinaladc.c: 76: d=b/10;
  1009  072E  300A               	movlw	10
  1010  072F  00F0               	movwf	___lwdiv@divisor
  1011  0730  3000               	movlw	0
  1012  0731  00F1               	movwf	___lwdiv@divisor+1
  1013  0732  0837               	movf	fun@b+1,w
  1014  0733  00F3               	movwf	___lwdiv@dividend+1
  1015  0734  0836               	movf	fun@b,w
  1016  0735  00F2               	movwf	___lwdiv@dividend
  1017  0736  120A  118A  262A  120A  118A  	fcall	___lwdiv
  1018  073B  0871               	movf	?___lwdiv+1,w
  1019  073C  1283               	bcf	3,5	;RP0=0, select bank0
  1020  073D  1303               	bcf	3,6	;RP1=0, select bank0
  1021  073E  00B9               	movwf	fun@d+1
  1022  073F  0870               	movf	?___lwdiv,w
  1023  0740  00B8               	movwf	fun@d
  1024                           
  1025                           ;16bitfinaladc.c: 77: e=b%10;
  1026  0741  300A               	movlw	10
  1027  0742  00F0               	movwf	___lwmod@divisor
  1028  0743  3000               	movlw	0
  1029  0744  00F1               	movwf	___lwmod@divisor+1
  1030  0745  0837               	movf	fun@b+1,w
  1031  0746  00F3               	movwf	___lwmod@dividend+1
  1032  0747  0836               	movf	fun@b,w
  1033  0748  00F2               	movwf	___lwmod@dividend
  1034  0749  120A  118A  25F8  120A  118A  	fcall	___lwmod
  1035  074E  0871               	movf	?___lwmod+1,w
  1036  074F  1283               	bcf	3,5	;RP0=0, select bank0
  1037  0750  1303               	bcf	3,6	;RP1=0, select bank0
  1038  0751  00A3               	movwf	fun@e+1
  1039  0752  0870               	movf	?___lwmod,w
  1040  0753  00A2               	movwf	fun@e
  1041                           
  1042                           ;16bitfinaladc.c: 79: f=d/10;
  1043  0754  300A               	movlw	10
  1044  0755  00F0               	movwf	___lwdiv@divisor
  1045  0756  3000               	movlw	0
  1046  0757  00F1               	movwf	___lwdiv@divisor+1
  1047  0758  0839               	movf	fun@d+1,w
  1048  0759  00F3               	movwf	___lwdiv@dividend+1
  1049  075A  0838               	movf	fun@d,w
  1050  075B  00F2               	movwf	___lwdiv@dividend
  1051  075C  120A  118A  262A  120A  118A  	fcall	___lwdiv
  1052  0761  0871               	movf	?___lwdiv+1,w
  1053  0762  1283               	bcf	3,5	;RP0=0, select bank0
  1054  0763  1303               	bcf	3,6	;RP1=0, select bank0
  1055  0764  00BB               	movwf	fun@f+1
  1056  0765  0870               	movf	?___lwdiv,w
  1057  0766  00BA               	movwf	fun@f
  1058                           
  1059                           ;16bitfinaladc.c: 80: g=d%10;
  1060  0767  300A               	movlw	10
  1061  0768  00F0               	movwf	___lwmod@divisor
  1062  0769  3000               	movlw	0
  1063  076A  00F1               	movwf	___lwmod@divisor+1
  1064  076B  0839               	movf	fun@d+1,w
  1065  076C  00F3               	movwf	___lwmod@dividend+1
  1066  076D  0838               	movf	fun@d,w
  1067  076E  00F2               	movwf	___lwmod@dividend
  1068  076F  120A  118A  25F8  120A  118A  	fcall	___lwmod
  1069  0774  0871               	movf	?___lwmod+1,w
  1070  0775  1283               	bcf	3,5	;RP0=0, select bank0
  1071  0776  1303               	bcf	3,6	;RP1=0, select bank0
  1072  0777  00A5               	movwf	fun@g+1
  1073  0778  0870               	movf	?___lwmod,w
  1074  0779  00A4               	movwf	fun@g
  1075                           
  1076                           ;16bitfinaladc.c: 82: l=f/10;
  1077  077A  300A               	movlw	10
  1078  077B  00F0               	movwf	___lwdiv@divisor
  1079  077C  3000               	movlw	0
  1080  077D  00F1               	movwf	___lwdiv@divisor+1
  1081  077E  083B               	movf	fun@f+1,w
  1082  077F  00F3               	movwf	___lwdiv@dividend+1
  1083  0780  083A               	movf	fun@f,w
  1084  0781  00F2               	movwf	___lwdiv@dividend
  1085  0782  120A  118A  262A  120A  118A  	fcall	___lwdiv
  1086  0787  0871               	movf	?___lwdiv+1,w
  1087  0788  1283               	bcf	3,5	;RP0=0, select bank0
  1088  0789  1303               	bcf	3,6	;RP1=0, select bank0
  1089  078A  00B3               	movwf	fun@l+1
  1090  078B  0870               	movf	?___lwdiv,w
  1091  078C  00B2               	movwf	fun@l
  1092                           
  1093                           ;16bitfinaladc.c: 83: m=f%10;
  1094  078D  300A               	movlw	10
  1095  078E  00F0               	movwf	___lwmod@divisor
  1096  078F  3000               	movlw	0
  1097  0790  00F1               	movwf	___lwmod@divisor+1
  1098  0791  083B               	movf	fun@f+1,w
  1099  0792  00F3               	movwf	___lwmod@dividend+1
  1100  0793  083A               	movf	fun@f,w
  1101  0794  00F2               	movwf	___lwmod@dividend
  1102  0795  120A  118A  25F8  120A  118A  	fcall	___lwmod
  1103  079A  0871               	movf	?___lwmod+1,w
  1104  079B  1283               	bcf	3,5	;RP0=0, select bank0
  1105  079C  1303               	bcf	3,6	;RP1=0, select bank0
  1106  079D  00AF               	movwf	fun@m+1
  1107  079E  0870               	movf	?___lwmod,w
  1108  079F  00AE               	movwf	fun@m
  1109                           
  1110                           ;16bitfinaladc.c: 85: n=l+(0x30);
  1111  07A0  0832               	movf	fun@l,w
  1112  07A1  3E30               	addlw	48
  1113  07A2  00B0               	movwf	fun@n
  1114  07A3  0833               	movf	fun@l+1,w
  1115  07A4  1803               	skipnc
  1116  07A5  3E01               	addlw	1
  1117  07A6  3E00               	addlw	0
  1118  07A7  00B1               	movwf	fun@n+1
  1119                           
  1120                           ;16bitfinaladc.c: 86: dat(n);
  1121  07A8  0831               	movf	fun@n+1,w
  1122  07A9  00F3               	movwf	dat@y+1
  1123  07AA  0830               	movf	fun@n,w
  1124  07AB  00F2               	movwf	dat@y
  1125  07AC  120A  118A  259B  120A  118A  	fcall	_dat
  1126                           
  1127                           ;16bitfinaladc.c: 87: h=m+(0x30);
  1128  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  1129  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  1130  07B3  082E               	movf	fun@m,w
  1131  07B4  3E30               	addlw	48
  1132  07B5  00A6               	movwf	fun@h
  1133  07B6  082F               	movf	fun@m+1,w
  1134  07B7  1803               	skipnc
  1135  07B8  3E01               	addlw	1
  1136  07B9  3E00               	addlw	0
  1137  07BA  00A7               	movwf	fun@h+1
  1138                           
  1139                           ;16bitfinaladc.c: 88: dat(h);
  1140  07BB  0827               	movf	fun@h+1,w
  1141  07BC  00F3               	movwf	dat@y+1
  1142  07BD  0826               	movf	fun@h,w
  1143  07BE  00F2               	movwf	dat@y
  1144  07BF  120A  118A  259B  120A  118A  	fcall	_dat
  1145                           
  1146                           ;16bitfinaladc.c: 89: i=g+(0x30);
  1147  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  1148  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  1149  07C6  0824               	movf	fun@g,w
  1150  07C7  3E30               	addlw	48
  1151  07C8  00A8               	movwf	fun@i
  1152  07C9  0825               	movf	fun@g+1,w
  1153  07CA  1803               	skipnc
  1154  07CB  3E01               	addlw	1
  1155  07CC  3E00               	addlw	0
  1156  07CD  00A9               	movwf	fun@i+1
  1157                           
  1158                           ;16bitfinaladc.c: 90: dat(i);
  1159  07CE  0829               	movf	fun@i+1,w
  1160  07CF  00F3               	movwf	dat@y+1
  1161  07D0  0828               	movf	fun@i,w
  1162  07D1  00F2               	movwf	dat@y
  1163  07D2  120A  118A  259B  120A  118A  	fcall	_dat
  1164                           
  1165                           ;16bitfinaladc.c: 91: j=e+(0x30);
  1166  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  1167  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  1168  07D9  0822               	movf	fun@e,w
  1169  07DA  3E30               	addlw	48
  1170  07DB  00AA               	movwf	fun@j
  1171  07DC  0823               	movf	fun@e+1,w
  1172  07DD  1803               	skipnc
  1173  07DE  3E01               	addlw	1
  1174  07DF  3E00               	addlw	0
  1175  07E0  00AB               	movwf	fun@j+1
  1176                           
  1177                           ;16bitfinaladc.c: 92: dat(j);
  1178  07E1  082B               	movf	fun@j+1,w
  1179  07E2  00F3               	movwf	dat@y+1
  1180  07E3  082A               	movf	fun@j,w
  1181  07E4  00F2               	movwf	dat@y
  1182  07E5  120A  118A  259B  120A  118A  	fcall	_dat
  1183                           
  1184                           ;16bitfinaladc.c: 93: k=c+(0x30);
  1185  07EA  1283               	bcf	3,5	;RP0=0, select bank0
  1186  07EB  1303               	bcf	3,6	;RP1=0, select bank0
  1187  07EC  0820               	movf	fun@c,w
  1188  07ED  3E30               	addlw	48
  1189  07EE  00AC               	movwf	fun@k
  1190  07EF  0821               	movf	fun@c+1,w
  1191  07F0  1803               	skipnc
  1192  07F1  3E01               	addlw	1
  1193  07F2  3E00               	addlw	0
  1194  07F3  00AD               	movwf	fun@k+1
  1195                           
  1196                           ;16bitfinaladc.c: 94: dat(k);
  1197  07F4  082D               	movf	fun@k+1,w
  1198  07F5  00F3               	movwf	dat@y+1
  1199  07F6  082C               	movf	fun@k,w
  1200  07F7  00F2               	movwf	dat@y
  1201  07F8  120A  118A  259B   	fcall	_dat
  1202  07FB  0008               	return
  1203  07FC                     __end_of_fun:	
  1204                           
  1205                           	psect	text9
  1206  059B                     __ptext9:	
  1207 ;; *************** function _dat *****************
  1208 ;; Defined at:
  1209 ;;		line 47 in file "16bitfinaladc.c"
  1210 ;; Parameters:    Size  Location     Type
  1211 ;;  y               2    2[COMMON] unsigned int 
  1212 ;; Auto vars:     Size  Location     Type
  1213 ;;		None
  1214 ;; Return value:  Size  Location     Type
  1215 ;;                  1    wreg      void 
  1216 ;; Registers used:
  1217 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1218 ;; Tracked objects:
  1219 ;;		On entry : 0/0
  1220 ;;		On exit  : 0/0
  1221 ;;		Unchanged: 0/0
  1222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1223 ;;      Params:         2       0       0       0       0
  1224 ;;      Locals:         0       0       0       0       0
  1225 ;;      Temps:          0       0       0       0       0
  1226 ;;      Totals:         2       0       0       0       0
  1227 ;;Total ram usage:        2 bytes
  1228 ;; Hardware stack levels used:    1
  1229 ;; Hardware stack levels required when called:    1
  1230 ;; This function calls:
  1231 ;;		_delay
  1232 ;; This function is called by:
  1233 ;;		_fun
  1234 ;; This function uses a non-reentrant model
  1235 ;;
  1236                           
  1237                           
  1238                           ;psect for function _dat
  1239  059B                     _dat:	
  1240                           
  1241                           ;16bitfinaladc.c: 49: PORTD=y;
  1242                           
  1243                           ;incstack = 0
  1244                           ; Regs used in _dat: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1245  059B  0872               	movf	dat@y,w
  1246  059C  1283               	bcf	3,5	;RP0=0, select bank0
  1247  059D  1303               	bcf	3,6	;RP1=0, select bank0
  1248  059E  0088               	movwf	8	;volatile
  1249                           
  1250                           ;16bitfinaladc.c: 50: RC0=1;
  1251  059F  1407               	bsf	7,0	;volatile
  1252                           
  1253                           ;16bitfinaladc.c: 51: RC1=0;
  1254  05A0  1087               	bcf	7,1	;volatile
  1255                           
  1256                           ;16bitfinaladc.c: 52: RC2=1;
  1257  05A1  1507               	bsf	7,2	;volatile
  1258                           
  1259                           ;16bitfinaladc.c: 53: delay();
  1260  05A2  120A  118A  25B8   	fcall	_delay
  1261                           
  1262                           ;16bitfinaladc.c: 54: RC2=0;
  1263  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  1264  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  1265  05A7  1107               	bcf	7,2	;volatile
  1266  05A8  0008               	return
  1267  05A9                     __end_of_dat:	
  1268                           
  1269                           	psect	text10
  1270  05CC                     __ptext10:	
  1271 ;; *************** function _cmmd *****************
  1272 ;; Defined at:
  1273 ;;		line 56 in file "16bitfinaladc.c"
  1274 ;; Parameters:    Size  Location     Type
  1275 ;;		None
  1276 ;; Auto vars:     Size  Location     Type
  1277 ;;		None
  1278 ;; Return value:  Size  Location     Type
  1279 ;;                  1    wreg      void 
  1280 ;; Registers used:
  1281 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1282 ;; Tracked objects:
  1283 ;;		On entry : 0/0
  1284 ;;		On exit  : 0/0
  1285 ;;		Unchanged: 0/0
  1286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1287 ;;      Params:         0       0       0       0       0
  1288 ;;      Locals:         0       0       0       0       0
  1289 ;;      Temps:          0       0       0       0       0
  1290 ;;      Totals:         0       0       0       0       0
  1291 ;;Total ram usage:        0 bytes
  1292 ;; Hardware stack levels used:    1
  1293 ;; Hardware stack levels required when called:    2
  1294 ;; This function calls:
  1295 ;;		_cmd
  1296 ;; This function is called by:
  1297 ;;		_fun
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           
  1302                           ;psect for function _cmmd
  1303  05CC                     _cmmd:	
  1304                           
  1305                           ;16bitfinaladc.c: 58: cmd(0x38);
  1306                           
  1307                           ;incstack = 0
  1308                           ; Regs used in _cmmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1309  05CC  3038               	movlw	56
  1310  05CD  00F2               	movwf	cmd@x
  1311  05CE  3000               	movlw	0
  1312  05CF  00F3               	movwf	cmd@x+1
  1313  05D0  120A  118A  258D  120A  118A  	fcall	_cmd
  1314                           
  1315                           ;16bitfinaladc.c: 59: cmd(0x0c);
  1316  05D5  300C               	movlw	12
  1317  05D6  00F2               	movwf	cmd@x
  1318  05D7  3000               	movlw	0
  1319  05D8  00F3               	movwf	cmd@x+1
  1320  05D9  120A  118A  258D  120A  118A  	fcall	_cmd
  1321                           
  1322                           ;16bitfinaladc.c: 60: cmd(0x06);
  1323  05DE  3006               	movlw	6
  1324  05DF  00F2               	movwf	cmd@x
  1325  05E0  3000               	movlw	0
  1326  05E1  00F3               	movwf	cmd@x+1
  1327  05E2  120A  118A  258D  120A  118A  	fcall	_cmd
  1328                           
  1329                           ;16bitfinaladc.c: 61: cmd(0x01);
  1330  05E7  3001               	movlw	1
  1331  05E8  00F2               	movwf	cmd@x
  1332  05E9  3000               	movlw	0
  1333  05EA  00F3               	movwf	cmd@x+1
  1334  05EB  120A  118A  258D  120A  118A  	fcall	_cmd
  1335                           
  1336                           ;16bitfinaladc.c: 62: cmd(0x80);
  1337  05F0  3080               	movlw	128
  1338  05F1  00F2               	movwf	cmd@x
  1339  05F2  3000               	movlw	0
  1340  05F3  00F3               	movwf	cmd@x+1
  1341  05F4  120A  118A  258D   	fcall	_cmd
  1342  05F7  0008               	return
  1343  05F8                     __end_of_cmmd:	
  1344                           
  1345                           	psect	text11
  1346  058D                     __ptext11:	
  1347 ;; *************** function _cmd *****************
  1348 ;; Defined at:
  1349 ;;		line 38 in file "16bitfinaladc.c"
  1350 ;; Parameters:    Size  Location     Type
  1351 ;;  x               2    2[COMMON] unsigned int 
  1352 ;; Auto vars:     Size  Location     Type
  1353 ;;		None
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  1    wreg      void 
  1356 ;; Registers used:
  1357 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1363 ;;      Params:         2       0       0       0       0
  1364 ;;      Locals:         0       0       0       0       0
  1365 ;;      Temps:          0       0       0       0       0
  1366 ;;      Totals:         2       0       0       0       0
  1367 ;;Total ram usage:        2 bytes
  1368 ;; Hardware stack levels used:    1
  1369 ;; Hardware stack levels required when called:    1
  1370 ;; This function calls:
  1371 ;;		_delay
  1372 ;; This function is called by:
  1373 ;;		_cmmd
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           
  1378                           ;psect for function _cmd
  1379  058D                     _cmd:	
  1380                           
  1381                           ;16bitfinaladc.c: 40: PORTD=x;
  1382                           
  1383                           ;incstack = 0
  1384                           ; Regs used in _cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1385  058D  0872               	movf	cmd@x,w
  1386  058E  1283               	bcf	3,5	;RP0=0, select bank0
  1387  058F  1303               	bcf	3,6	;RP1=0, select bank0
  1388  0590  0088               	movwf	8	;volatile
  1389                           
  1390                           ;16bitfinaladc.c: 41: RC0=0;
  1391  0591  1007               	bcf	7,0	;volatile
  1392                           
  1393                           ;16bitfinaladc.c: 42: RC1=0;
  1394  0592  1087               	bcf	7,1	;volatile
  1395                           
  1396                           ;16bitfinaladc.c: 43: RC2=1;
  1397  0593  1507               	bsf	7,2	;volatile
  1398                           
  1399                           ;16bitfinaladc.c: 44: delay();
  1400  0594  120A  118A  25B8   	fcall	_delay
  1401                           
  1402                           ;16bitfinaladc.c: 45: RC2=0;
  1403  0597  1283               	bcf	3,5	;RP0=0, select bank0
  1404  0598  1303               	bcf	3,6	;RP1=0, select bank0
  1405  0599  1107               	bcf	7,2	;volatile
  1406  059A  0008               	return
  1407  059B                     __end_of_cmd:	
  1408                           
  1409                           	psect	text12
  1410  05B8                     __ptext12:	
  1411 ;; *************** function _delay *****************
  1412 ;; Defined at:
  1413 ;;		line 33 in file "16bitfinaladc.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;		None
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;  i               2    0[COMMON] int 
  1418 ;; Return value:  Size  Location     Type
  1419 ;;                  1    wreg      void 
  1420 ;; Registers used:
  1421 ;;		wreg, status,2, btemp+1
  1422 ;; Tracked objects:
  1423 ;;		On entry : 0/0
  1424 ;;		On exit  : 0/0
  1425 ;;		Unchanged: 0/0
  1426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1427 ;;      Params:         0       0       0       0       0
  1428 ;;      Locals:         2       0       0       0       0
  1429 ;;      Temps:          0       0       0       0       0
  1430 ;;      Totals:         2       0       0       0       0
  1431 ;;Total ram usage:        2 bytes
  1432 ;; Hardware stack levels used:    1
  1433 ;; This function calls:
  1434 ;;		Nothing
  1435 ;; This function is called by:
  1436 ;;		_cmd
  1437 ;;		_dat
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           
  1442                           ;psect for function _delay
  1443  05B8                     _delay:	
  1444                           
  1445                           ;16bitfinaladc.c: 35: int i;
  1446                           ;16bitfinaladc.c: 36: for(i=0;i<1000;i++);
  1447                           
  1448                           ;incstack = 0
  1449                           ; Regs used in _delay: [wreg+status,2+btemp+1]
  1450  05B8  01F0               	clrf	delay@i
  1451  05B9  01F1               	clrf	delay@i+1
  1452  05BA                     L1:	
  1453  05BA  0871               	movf	delay@i+1,w
  1454  05BB  3A80               	xorlw	128
  1455  05BC  00FF               	movwf	127
  1456  05BD  3083               	movlw	131
  1457  05BE  027F               	subwf	127,w
  1458  05BF  1D03               	skipz
  1459  05C0  2DC3               	goto	u185
  1460  05C1  30E8               	movlw	232
  1461  05C2  0270               	subwf	delay@i,w
  1462  05C3                     u185:	
  1463  05C3  1803               	btfsc	3,0
  1464  05C4  0008               	return
  1465  05C5  3001               	movlw	1
  1466  05C6  07F0               	addwf	delay@i,f
  1467  05C7  1803               	skipnc
  1468  05C8  0AF1               	incf	delay@i+1,f
  1469  05C9  3000               	movlw	0
  1470  05CA  07F1               	addwf	delay@i+1,f
  1471  05CB  2DBA               	goto	L1
  1472  05CC                     __end_of_delay:	
  1473                           
  1474                           	psect	text13
  1475  05F8                     __ptext13:	
  1476 ;; *************** function ___lwmod *****************
  1477 ;; Defined at:
  1478 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  1479 ;; Parameters:    Size  Location     Type
  1480 ;;  divisor         2    0[COMMON] unsigned int 
  1481 ;;  dividend        2    2[COMMON] unsigned int 
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;  counter         1    5[COMMON] unsigned char 
  1484 ;; Return value:  Size  Location     Type
  1485 ;;                  2    0[COMMON] unsigned int 
  1486 ;; Registers used:
  1487 ;;		wreg, status,2, status,0
  1488 ;; Tracked objects:
  1489 ;;		On entry : 0/0
  1490 ;;		On exit  : 0/0
  1491 ;;		Unchanged: 0/0
  1492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1493 ;;      Params:         4       0       0       0       0
  1494 ;;      Locals:         1       0       0       0       0
  1495 ;;      Temps:          1       0       0       0       0
  1496 ;;      Totals:         6       0       0       0       0
  1497 ;;Total ram usage:        6 bytes
  1498 ;; Hardware stack levels used:    1
  1499 ;; This function calls:
  1500 ;;		Nothing
  1501 ;; This function is called by:
  1502 ;;		_fun
  1503 ;; This function uses a non-reentrant model
  1504 ;;
  1505                           
  1506                           
  1507                           ;psect for function ___lwmod
  1508  05F8                     ___lwmod:	
  1509                           
  1510                           ;incstack = 0
  1511                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1512  05F8  0870               	movf	___lwmod@divisor,w
  1513  05F9  0471               	iorwf	___lwmod@divisor+1,w
  1514  05FA  1903               	btfsc	3,2
  1515  05FB  2E25               	goto	l831
  1516  05FC  01F5               	clrf	___lwmod@counter
  1517  05FD  0AF5               	incf	___lwmod@counter,f
  1518  05FE                     l821:	
  1519  05FE  1BF1               	btfsc	___lwmod@divisor+1,7
  1520  05FF  2E0C               	goto	l823
  1521  0600  3001               	movlw	1
  1522  0601                     u285:	
  1523  0601  1003               	clrc
  1524  0602  0DF0               	rlf	___lwmod@divisor,f
  1525  0603  0DF1               	rlf	___lwmod@divisor+1,f
  1526  0604  3EFF               	addlw	-1
  1527  0605  1D03               	skipz
  1528  0606  2E01               	goto	u285
  1529  0607  3001               	movlw	1
  1530  0608  00F4               	movwf	??___lwmod
  1531  0609  0874               	movf	??___lwmod,w
  1532  060A  07F5               	addwf	___lwmod@counter,f
  1533  060B  2DFE               	goto	l821
  1534  060C                     l823:	
  1535  060C  0871               	movf	___lwmod@divisor+1,w
  1536  060D  0273               	subwf	___lwmod@dividend+1,w
  1537  060E  1D03               	skipz
  1538  060F  2E12               	goto	u305
  1539  0610  0870               	movf	___lwmod@divisor,w
  1540  0611  0272               	subwf	___lwmod@dividend,w
  1541  0612                     u305:	
  1542  0612  1C03               	skipc
  1543  0613  2E1A               	goto	l827
  1544  0614  0870               	movf	___lwmod@divisor,w
  1545  0615  02F2               	subwf	___lwmod@dividend,f
  1546  0616  0871               	movf	___lwmod@divisor+1,w
  1547  0617  1C03               	skipc
  1548  0618  03F3               	decf	___lwmod@dividend+1,f
  1549  0619  02F3               	subwf	___lwmod@dividend+1,f
  1550  061A                     l827:	
  1551  061A  3001               	movlw	1
  1552  061B                     u315:	
  1553  061B  1003               	clrc
  1554  061C  0CF1               	rrf	___lwmod@divisor+1,f
  1555  061D  0CF0               	rrf	___lwmod@divisor,f
  1556  061E  3EFF               	addlw	-1
  1557  061F  1D03               	skipz
  1558  0620  2E1B               	goto	u315
  1559  0621  3001               	movlw	1
  1560  0622  02F5               	subwf	___lwmod@counter,f
  1561  0623  1D03               	btfss	3,2
  1562  0624  2E0C               	goto	l823
  1563  0625                     l831:	
  1564  0625  0873               	movf	___lwmod@dividend+1,w
  1565  0626  00F1               	movwf	?___lwmod+1
  1566  0627  0872               	movf	___lwmod@dividend,w
  1567  0628  00F0               	movwf	?___lwmod
  1568  0629  0008               	return
  1569  062A                     __end_of___lwmod:	
  1570                           
  1571                           	psect	text14
  1572  062A                     __ptext14:	
  1573 ;; *************** function ___lwdiv *****************
  1574 ;; Defined at:
  1575 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;  divisor         2    0[COMMON] unsigned int 
  1578 ;;  dividend        2    2[COMMON] unsigned int 
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;  quotient        2    5[COMMON] unsigned int 
  1581 ;;  counter         1    7[COMMON] unsigned char 
  1582 ;; Return value:  Size  Location     Type
  1583 ;;                  2    0[COMMON] unsigned int 
  1584 ;; Registers used:
  1585 ;;		wreg, status,2, status,0
  1586 ;; Tracked objects:
  1587 ;;		On entry : 0/0
  1588 ;;		On exit  : 0/0
  1589 ;;		Unchanged: 0/0
  1590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1591 ;;      Params:         4       0       0       0       0
  1592 ;;      Locals:         3       0       0       0       0
  1593 ;;      Temps:          1       0       0       0       0
  1594 ;;      Totals:         8       0       0       0       0
  1595 ;;Total ram usage:        8 bytes
  1596 ;; Hardware stack levels used:    1
  1597 ;; This function calls:
  1598 ;;		Nothing
  1599 ;; This function is called by:
  1600 ;;		_fun
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           
  1605                           ;psect for function ___lwdiv
  1606  062A                     ___lwdiv:	
  1607                           
  1608                           ;incstack = 0
  1609                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1610  062A  01F5               	clrf	___lwdiv@quotient
  1611  062B  01F6               	clrf	___lwdiv@quotient+1
  1612  062C  0870               	movf	___lwdiv@divisor,w
  1613  062D  0471               	iorwf	___lwdiv@divisor+1,w
  1614  062E  1903               	btfsc	3,2
  1615  062F  2E61               	goto	l809
  1616  0630  01F7               	clrf	___lwdiv@counter
  1617  0631  0AF7               	incf	___lwdiv@counter,f
  1618  0632                     l797:	
  1619  0632  1BF1               	btfsc	___lwdiv@divisor+1,7
  1620  0633  2E40               	goto	l799
  1621  0634  3001               	movlw	1
  1622  0635                     u215:	
  1623  0635  1003               	clrc
  1624  0636  0DF0               	rlf	___lwdiv@divisor,f
  1625  0637  0DF1               	rlf	___lwdiv@divisor+1,f
  1626  0638  3EFF               	addlw	-1
  1627  0639  1D03               	skipz
  1628  063A  2E35               	goto	u215
  1629  063B  3001               	movlw	1
  1630  063C  00F4               	movwf	??___lwdiv
  1631  063D  0874               	movf	??___lwdiv,w
  1632  063E  07F7               	addwf	___lwdiv@counter,f
  1633  063F  2E32               	goto	l797
  1634  0640                     l799:	
  1635  0640  3001               	movlw	1
  1636  0641                     u235:	
  1637  0641  1003               	clrc
  1638  0642  0DF5               	rlf	___lwdiv@quotient,f
  1639  0643  0DF6               	rlf	___lwdiv@quotient+1,f
  1640  0644  3EFF               	addlw	-1
  1641  0645  1D03               	skipz
  1642  0646  2E41               	goto	u235
  1643  0647  0871               	movf	___lwdiv@divisor+1,w
  1644  0648  0273               	subwf	___lwdiv@dividend+1,w
  1645  0649  1D03               	skipz
  1646  064A  2E4D               	goto	u245
  1647  064B  0870               	movf	___lwdiv@divisor,w
  1648  064C  0272               	subwf	___lwdiv@dividend,w
  1649  064D                     u245:	
  1650  064D  1C03               	skipc
  1651  064E  2E56               	goto	l805
  1652  064F  0870               	movf	___lwdiv@divisor,w
  1653  0650  02F2               	subwf	___lwdiv@dividend,f
  1654  0651  0871               	movf	___lwdiv@divisor+1,w
  1655  0652  1C03               	skipc
  1656  0653  03F3               	decf	___lwdiv@dividend+1,f
  1657  0654  02F3               	subwf	___lwdiv@dividend+1,f
  1658  0655  1475               	bsf	___lwdiv@quotient,0
  1659  0656                     l805:	
  1660  0656  3001               	movlw	1
  1661  0657                     u255:	
  1662  0657  1003               	clrc
  1663  0658  0CF1               	rrf	___lwdiv@divisor+1,f
  1664  0659  0CF0               	rrf	___lwdiv@divisor,f
  1665  065A  3EFF               	addlw	-1
  1666  065B  1D03               	skipz
  1667  065C  2E57               	goto	u255
  1668  065D  3001               	movlw	1
  1669  065E  02F7               	subwf	___lwdiv@counter,f
  1670  065F  1D03               	btfss	3,2
  1671  0660  2E40               	goto	l799
  1672  0661                     l809:	
  1673  0661  0876               	movf	___lwdiv@quotient+1,w
  1674  0662  00F1               	movwf	?___lwdiv+1
  1675  0663  0875               	movf	___lwdiv@quotient,w
  1676  0664  00F0               	movwf	?___lwdiv
  1677  0665  0008               	return
  1678  0666                     __end_of___lwdiv:	
  1679  007E                     btemp	set	126	;btemp
  1680  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      28
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_fun
    _fun->___lwdiv
    _dat->_delay
    _cmmd->_cmd
    _cmd->_delay

Critical Paths under _main in BANK0

    _main->_fun

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    2360
                                             10 COMMON     4     4      0
                                _fun
                            _i2c_ack
                           _i2c_nack
                           _i2c_read
                           _i2c_send
                          _i2c_start
                           _i2c_stop
 ---------------------------------------------------------------------------------
 (1) _i2c_stop                                             0     0      0       0
                           _i2c_flag
 ---------------------------------------------------------------------------------
 (1) _i2c_start                                            0     0      0       0
                           _i2c_flag
 ---------------------------------------------------------------------------------
 (1) _i2c_send                                             1     1      0      15
                                              0 COMMON     1     1      0
                           _i2c_flag
 ---------------------------------------------------------------------------------
 (1) _i2c_read                                             0     0      0       0
                           _i2c_flag
 ---------------------------------------------------------------------------------
 (1) _i2c_nack                                             0     0      0       0
                           _i2c_flag
 ---------------------------------------------------------------------------------
 (1) _i2c_ack                                              0     0      0       0
                           _i2c_flag
 ---------------------------------------------------------------------------------
 (2) _i2c_flag                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fun                                                 30    28      2    2320
                                              8 COMMON     2     0      2
                                              0 BANK0     28    28      0
                            ___lwdiv
                            ___lwmod
                               _cmmd
                                _dat
 ---------------------------------------------------------------------------------
 (2) _dat                                                  2     0      2     333
                                              2 COMMON     2     0      2
                              _delay
 ---------------------------------------------------------------------------------
 (2) _cmmd                                                 0     0      0     333
                                _cmd
 ---------------------------------------------------------------------------------
 (3) _cmd                                                  2     0      2     333
                                              2 COMMON     2     0      2
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     583
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     586
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fun
     ___lwdiv
     ___lwmod
     _cmmd
       _cmd
         _delay
     _dat
       _delay
   _i2c_ack
     _i2c_flag
   _i2c_nack
     _i2c_flag
   _i2c_read
     _i2c_flag
   _i2c_send
     _i2c_flag
   _i2c_start
     _i2c_flag
   _i2c_stop
     _i2c_flag

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1C      1C       5       35.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Oct 04 09:15:38 2023

            __CFG_CP$OFF 0000                       l43 055F                       l64 05B3  
            __CFG_LVP$ON 0000                      l805 0656                      l821 05FE  
                    l823 060C                      l831 0625                      l809 0661  
                    l827 061A                      l797 0632                      l799 0640  
                    l897 069F                      _RC0 0038                      _RC1 0039  
                    _RC2 003A                      u215 0635                      u305 0612  
                    u235 0641                      u315 061B                      u245 064D  
                    u255 0657                      _PEN 048A                      u185 05C3  
                    u337 069A             __CFG_CPD$OFF 0000                      u347 06BB  
                    u285 0601                      _SEN 0488                      _dat 059B  
                    _cmd 058D                      _fun 06FD             __CFG_FOSC$HS 0000  
                   ?_dat 0072                     ?_cmd 0072                     ?_fun 0078  
                   _RCEN 048B                     _RSEN 0489             __CFG_WRT$OFF 0000  
                   _cmmd 05CC                     dat@y 0072                     _main 0666  
                   cmd@x 0072                     btemp 007E                     fun@a 0034  
                   fun@b 0036                     fun@c 0020                     fun@d 0038  
                   fun@e 0022                     fun@f 003A                     fun@g 0024  
                   fun@h 0026                     fun@i 0028                     fun@j 002A  
                   fun@k 002C                     fun@l 0032                     fun@m 002E  
                   fun@n 0030            __CFG_BOREN$ON 0000                     start 0000  
        __end_of_i2c_ack 057B                    ??_dat 0074                    ??_cmd 0074  
                  ??_fun 007A                    ?_cmmd 0070                    ?_main 0070  
                  _ACKEN 048C                    _ACKDT 048D            __CFG_WDTE$OFF 0000  
        __end_of___lwdiv 0666          __end_of___lwmod 062A                    _PORTD 0008  
                  _TRISD 0088                    _SSPIF 0063                    _delay 05B8  
                  status 0003                    wtemp0 007E          __initialization 07FC  
           __end_of_cmmd 05F8             __end_of_main 06FD         __end_of_i2c_flag 0565  
       __end_of_i2c_nack 0583         __end_of_i2c_read 058D         __end_of_i2c_send 05B8  
       __end_of_i2c_stop 0573                   ??_cmmd 0074                   ??_main 007A  
                 ?_delay 0070                   _SSPADD 0093                   _TRISC0 0438  
                 _TRISC1 0439                   _TRISC2 043A                   _SSPBUF 0013  
                 _SSPCON 0014       __size_of_i2c_start 0007                ??_i2c_ack 0070  
         __CFG_PWRTE$OFF 0000                ??___lwdiv 0074                ??___lwmod 0074  
                 delay@i 0070                   fun@adc 0078  __end_of__initialization 07FC  
         __pcstackCOMMON 0070            __end_of_delay 05CC        __end_of_i2c_start 056C  
                ??_delay 0070                ?_i2c_flag 0070                ?_i2c_nack 0070  
              ?_i2c_read 0070                ?_i2c_send 0070                ?_i2c_stop 0070  
             __pmaintext 0666                  _ACKSTAT 048E               ??_i2c_flag 0070  
             ??_i2c_nack 0070               ??_i2c_read 0070               ??_i2c_send 0070  
             ??_i2c_stop 0070                  _i2c_ack 0573                  ___lwdiv 062A  
                ___lwmod 05F8                  __ptext1 056C                  __ptext2 0565  
                __ptext3 05A9                  __ptext4 0583                  __ptext5 057B  
                __ptext6 0573                  __ptext7 055F                  __ptext8 06FD  
                __ptext9 059B             __size_of_dat 000E             __size_of_cmd 000E  
           __size_of_fun 00FF     end_of_initialization 07FC                i2c_send@b 0070  
             main@result 007C      start_initialization 07FC              __end_of_dat 05A9  
            __end_of_cmd 059B                _i2c_start 0565              __end_of_fun 07FC  
      __size_of_i2c_flag 0006        __size_of_i2c_nack 0008        __size_of_i2c_read 000A  
      __size_of_i2c_send 000F        __size_of_i2c_stop 0007                ___latbits 0002  
          __pcstackBANK0 0020               ?_i2c_start 0070                 ?_i2c_ack 0070  
       ___lwdiv@dividend 0072                 ?___lwdiv 0070                 ?___lwmod 0070  
       ___lwdiv@quotient 0075           __size_of_delay 0014              ??_i2c_start 0070  
               _i2c_flag 055F                 _i2c_nack 057B                 _i2c_read 0583  
               _i2c_send 05A9                 _i2c_stop 056C         __size_of_i2c_ack 0008  
       __size_of___lwdiv 003C         __size_of___lwmod 0032          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0077                 __ptext10 05CC                 __ptext11 058D  
               __ptext12 05B8                 __ptext13 05F8                 __ptext14 062A  
          __size_of_cmmd 002C            __size_of_main 0097         ___lwmod@dividend 0072  
        ___lwmod@divisor 0070          ___lwmod@counter 0075  
